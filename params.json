{
  "name": "Teacup NATS",
  "tagline": "Teacup based NATS client for Erlang",
  "body": "# teacup_nats\r\n\r\nA [Teacup](https://github.com/yuce/teacup.git) based Erlang client library for [NATS](http://nats.io/)\r\nhigh performance messaging platform.\r\n\r\n## NEWS\r\n\r\n* **2016-04-03**: Released version 0.3.3. This release brings:\r\n\r\n    * Using [teacup 0.3.3](https://github.com/yuce/teacup/tree/0.3.3),\r\n    which boosts the performance by 50%.\r\n    * Implemented connect retry / reconnect strategy.\r\n    * Implemented message buffering.\r\n    * Sub and Unsub messages are queued.\r\n\r\n* **2016-03-27**: You can check how the performance of **teacup_nats** compares to other NATS clients\r\n[here](https://github.com/yuce/nats-client-benchmarks).\r\n\r\n* **2016-03-19**: Initial release.\r\n\r\n## Getting Started\r\n\r\n**teacup_nats** requires Erlang/OTP 18.0+. It uses [rebar3](http://www.rebar3.org/)\r\nas the build tool and is available on [hex.pm](https://hex.pm/). Just include the following\r\nin your `rebar.config`:\r\n\r\n```erlang\r\n{deps, [teacup_nats]}.\r\n```\r\n\r\n**teacup_nats** depends on the `teacup` app to be started. Include it in your `.app.src` file:\r\n\r\n```erlang\r\n...\r\n  {applications,\r\n   [kernel,\r\n    stdlib,\r\n    teacup\r\n   ]},\r\n...\r\n```\r\n\r\nOr, start it manually:\r\n\r\n```erlang\r\nok = application:start(teacup).\r\n```\r\n\r\n**rebar3** has a nice way of starting apps in the shell, you can try:\r\n\r\n```\r\n$ rebar3 shell --apps teacup\r\n```\r\n\r\n## TODO\r\n\r\n* Clustering\r\n* TLS transport support\r\n\r\n\r\n## API\r\n\r\n### Aysnchronous Connection\r\n\r\nWhen using asycnhronous connections, you need to wait for a `{Conn, ready}`\r\nmessage before publishing messages, subcribing to/unsubscribing from subjects.\r\n\r\n* Connection functions:\r\n    * `tcnats:connect()`: Connect to the NATS server at address `127.0.0.1`, port `4222`,\r\n    * `tcnats:connect(Host :: binary(), Port :: integer())`: Connect to the NATS server\r\n    at `Host` and port `PORT`,\r\n    * `tcnats:connect(Host :: binary(), Port :: integer(), Opts :: map())`: Similar to\r\n    above, but also takes an `Opts` map. Currently usable keys:\r\n        * `verbose => true | false`: If `verbose == true`, NATS server\r\n        sends an acknowledgement message on `pub`, `sub`, `unsub` operations and\r\n        `connect` operation becomes synchronous.\r\n        * `user => User :: binary()`,\r\n        * `pass => Password :: binary()`,\r\n        * `buffer_size => MessageBufferSize :: non_neg_integer()`: The number of publish messages\r\n        to buffer before quitting. The default is 0. Setting `MesssageBufferSize` to\r\n        `infinity` enables unlimited buffering.\r\n        * `reconnect => {Interval :: non_neg_integer(), MaxRetry :: non_neg_integer()}`: Specifies\r\n        reconnect strategy. `Interval` is the time in milliseconds between retrials, and `MaxRetry` is\r\n        the number of retrials before quitting. You can set `MaxRetry` to `infinity` to try reconnecting\r\n        forever. The default is `{undefined, 0}`, \"don't try to reconnect\".\r\n* Publish functions:\r\n    * `tcnats:pub(Conn :: teacup_ref(), Subject :: binary())`: Publish message with only\r\n    the subject,\r\n    * `tcnats:pub(Conn :: teacup_ref(), Subject :: binary()), Opts :: map()`: Publish message\r\n    the subject with `Options`. Valid options:\r\n        * `payload => Payload :: binary()`,\r\n        * `reply_to => Subject :: binary()`\r\n* Subscribe functions:\r\n    * `tcnats:sub(Conn :: teacup_ref(), Subject :: binary())`: Subscribe to the `Subject`,\r\n    * `tcnats:sub(Conn :: teacup_ref(), Subject :: binary(), Opts :: map())`: Subscribe to the `Subject`, with\r\n    `Options`. Valid options:\r\n        * `queue_group => QGroup :: binary()`\r\n* Unsubscribe functions:\r\n    * `tcnats:unsub(Conn :: teacup_ref(), Subject :: binary())`: Unsubscribe from `Subject`,\r\n    * `tcnats:unsub(Conn :: teacup_ref(), Subject :: binary(), Opts :: map())`: Unsubscribe from `Subject`, with\r\n    `Options`. Valid options:\r\n        * `max_messages => MaxMessages :: integer()`: Automatically unsubscribe after receiving `MaxMessages`.\r\n\r\n#### Sample\r\n\r\n```erlang\r\nmain() ->\r\n    % Connect to the NATS server\r\n    {ok, Conn} = tcnats:connect(<<\"demo.nats.io\">>, 4222),\r\n    % When the connection is OK to use, a `ready` message is sent, wait for it\r\n    ready_loop(Conn).\r\n\r\nready_loop(Conn) ->\r\n    receive\r\n        {Conn, ready} ->\r\n            % It's OK to use the connection now\r\n            % Publish some message\r\n            tcnats:pub(Conn, <<\"teacup.control\">>, #{payload => <<\"start\">>}),\r\n            % subscribe to some subject\r\n            tcnats:sub(Conn, <<\"foo.*\">>),\r\n            loop(Conn)\r\n    end.\r\n\r\nloop(Conn) ->\r\n    receive\r\n        {Conn, {msg, Subject, _ReplyTo, Payload}} ->\r\n            % Do something with the received message\r\n            io:format(\"~p: ~p~n\", [Subject, Payload]),\r\n            loop(Conn)\r\n    end.\r\n```\r\n\r\n### Synchronous Connection\r\n\r\nIn order to activate the synchronous mode, just pass `#{verbose => true` to `tcnats:connect`.\r\n\r\nConnect, publish, subscribe and unsubscribe operations block and return either `ok` on\r\nsuccess or `{error, Reason :: term()}` on failure.\r\n\r\n#### Sample\r\n\r\n```erlang\r\nmain() ->\r\n    % Connect to the NATS server\r\n    {ok, Conn} = tcnats:connect(<<\"demo.nats.io\">>, 4222, #{verbose => true}),\r\n    % The connection is OK to use\r\n    % Publish some message\r\n    ok = tcnats:pub(Conn, <<\"teacup.control\">>, #{payload => <<\"start\">>}),\r\n    % subscribe to some subject\r\n    ok = tcnats:sub(Conn, <<\"foo.*\">>),\r\n    loop(Conn).\r\n\r\nloop(Conn) ->\r\n    receive\r\n        {Conn, {msg, Subject, _ReplyTo, Payload}} ->\r\n            % Do something with the received message\r\n            io:format(\"~p: ~p~n\", [Subject, Payload]),\r\n            loop(Conn)\r\n    end.\r\n\r\n```\r\n\r\n## License\r\n\r\n```\r\nCopyright (c) 2016, Yuce Tekol <yucetekol@gmail.com>.\r\nAll rights reserved.\r\n\r\nRedistribution and use in source and binary forms, with or without\r\nmodification, are permitted provided that the following conditions are\r\nmet:\r\n\r\n* Redistributions of source code must retain the above copyright\r\n  notice, this list of conditions and the following disclaimer.\r\n\r\n* Redistributions in binary form must reproduce the above copyright\r\n  notice, this list of conditions and the following disclaimer in the\r\n  documentation and/or other materials provided with the distribution.\r\n\r\n* The names of its contributors may not be used to endorse or promote\r\n  products derived from this software without specific prior written\r\n  permission.\r\n\r\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\r\n\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\r\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\r\nA PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\r\nOWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\r\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\r\nLIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\r\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\r\nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\r\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n```",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}